//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmployeeManagementt
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EmployeeManagementtEntities : DbContext
    {
        public EmployeeManagementtEntities()
            : base("name=EmployeeManagementtEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EmployeeAddress> EmployeeAddresses { get; set; }
        public virtual DbSet<EmployeeDepartment> EmployeeDepartments { get; set; }
        public virtual DbSet<EmployeeDesignation> EmployeeDesignations { get; set; }
        public virtual DbSet<EmployeeDetail> EmployeeDetails { get; set; }
        public virtual DbSet<EmployeeDocumentMaster> EmployeeDocumentMasters { get; set; }
        public virtual DbSet<EmployeeDocument> EmployeeDocuments { get; set; }
        public virtual DbSet<EmployeeEducationDetail> EmployeeEducationDetails { get; set; }
        public virtual DbSet<EmployeeExperience> EmployeeExperiences { get; set; }
        public virtual DbSet<EmployeeLoginCredential> EmployeeLoginCredentials { get; set; }
        public virtual DbSet<EmployeeSalaryStructure> EmployeeSalaryStructures { get; set; }
    
        public virtual ObjectResult<usp_EmployeeAddress_Result> usp_EmployeeAddress(Nullable<int> addressID, Nullable<int> employeeID, string addressLine1, string addressLine2, string postalCode, string city, string state, string country, Nullable<bool> isCurrent, Nullable<bool> isPermanent, Nullable<int> createdBy, Nullable<int> updatedBy, string operation)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var isCurrentParameter = isCurrent.HasValue ?
                new ObjectParameter("IsCurrent", isCurrent) :
                new ObjectParameter("IsCurrent", typeof(bool));
    
            var isPermanentParameter = isPermanent.HasValue ?
                new ObjectParameter("IsPermanent", isPermanent) :
                new ObjectParameter("IsPermanent", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeAddress_Result>("usp_EmployeeAddress", addressIDParameter, employeeIDParameter, addressLine1Parameter, addressLine2Parameter, postalCodeParameter, cityParameter, stateParameter, countryParameter, isCurrentParameter, isPermanentParameter, createdByParameter, updatedByParameter, operationParameter);
        }
    
        public virtual ObjectResult<string> usp_EmployeeDepartment(Nullable<int> departmentID, string department, Nullable<int> createdBy, Nullable<int> updatedBy, string operation)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_EmployeeDepartment", departmentIDParameter, departmentParameter, createdByParameter, updatedByParameter, operationParameter);
        }
    
        public virtual ObjectResult<string> usp_EmployeeDesignation(Nullable<int> designationID, string designation, Nullable<int> createdBy, Nullable<int> updatedBy, string operation)
        {
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_EmployeeDesignation", designationIDParameter, designationParameter, createdByParameter, updatedByParameter, operationParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDetails_Result> usp_EmployeeDetails(Nullable<int> employeeID, string photo, string firstName, string lastName, Nullable<System.DateTime> dateofBirth, string gender, string personalEmail, string officialEmail, string phoneNo, string emergencyContactNo, string workLocation, string workingState, string workingCountry, Nullable<System.DateTime> dateofJoining, string designation, string department, string reportingManager, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<int> updatedBy, string operation)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dateofBirthParameter = dateofBirth.HasValue ?
                new ObjectParameter("DateofBirth", dateofBirth) :
                new ObjectParameter("DateofBirth", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var personalEmailParameter = personalEmail != null ?
                new ObjectParameter("PersonalEmail", personalEmail) :
                new ObjectParameter("PersonalEmail", typeof(string));
    
            var officialEmailParameter = officialEmail != null ?
                new ObjectParameter("OfficialEmail", officialEmail) :
                new ObjectParameter("OfficialEmail", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var emergencyContactNoParameter = emergencyContactNo != null ?
                new ObjectParameter("EmergencyContactNo", emergencyContactNo) :
                new ObjectParameter("EmergencyContactNo", typeof(string));
    
            var workLocationParameter = workLocation != null ?
                new ObjectParameter("WorkLocation", workLocation) :
                new ObjectParameter("WorkLocation", typeof(string));
    
            var workingStateParameter = workingState != null ?
                new ObjectParameter("WorkingState", workingState) :
                new ObjectParameter("WorkingState", typeof(string));
    
            var workingCountryParameter = workingCountry != null ?
                new ObjectParameter("WorkingCountry", workingCountry) :
                new ObjectParameter("WorkingCountry", typeof(string));
    
            var dateofJoiningParameter = dateofJoining.HasValue ?
                new ObjectParameter("DateofJoining", dateofJoining) :
                new ObjectParameter("DateofJoining", typeof(System.DateTime));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var reportingManagerParameter = reportingManager != null ?
                new ObjectParameter("ReportingManager", reportingManager) :
                new ObjectParameter("ReportingManager", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDetails_Result>("usp_EmployeeDetails", employeeIDParameter, photoParameter, firstNameParameter, lastNameParameter, dateofBirthParameter, genderParameter, personalEmailParameter, officialEmailParameter, phoneNoParameter, emergencyContactNoParameter, workLocationParameter, workingStateParameter, workingCountryParameter, dateofJoiningParameter, designationParameter, departmentParameter, reportingManagerParameter, isActiveParameter, createdByParameter, updatedByParameter, operationParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeDocument_Result> usp_EmployeeDocument(Nullable<int> employeeID, string documentImage, string documentName, Nullable<int> createdBy, Nullable<int> updatedBy, string operation)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var documentImageParameter = documentImage != null ?
                new ObjectParameter("DocumentImage", documentImage) :
                new ObjectParameter("DocumentImage", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeDocument_Result>("usp_EmployeeDocument", employeeIDParameter, documentImageParameter, documentNameParameter, createdByParameter, updatedByParameter, operationParameter);
        }
    
        public virtual ObjectResult<string> usp_EmployeeDocumentMaster(Nullable<int> documentID, string documentName, Nullable<int> createdBy, Nullable<int> updatedBy, string operation)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_EmployeeDocumentMaster", documentIDParameter, documentNameParameter, createdByParameter, updatedByParameter, operationParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeEducationDetails_Result> usp_EmployeeEducationDetails(Nullable<int> educationID, Nullable<int> employeeID, string degree, string institution, string state, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string degreeType, Nullable<decimal> percentage, Nullable<int> createdBy, Nullable<int> updatedBy, string operation)
        {
            var educationIDParameter = educationID.HasValue ?
                new ObjectParameter("EducationID", educationID) :
                new ObjectParameter("EducationID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var degreeParameter = degree != null ?
                new ObjectParameter("Degree", degree) :
                new ObjectParameter("Degree", typeof(string));
    
            var institutionParameter = institution != null ?
                new ObjectParameter("Institution", institution) :
                new ObjectParameter("Institution", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var degreeTypeParameter = degreeType != null ?
                new ObjectParameter("DegreeType", degreeType) :
                new ObjectParameter("DegreeType", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeEducationDetails_Result>("usp_EmployeeEducationDetails", educationIDParameter, employeeIDParameter, degreeParameter, institutionParameter, stateParameter, startDateParameter, endDateParameter, degreeTypeParameter, percentageParameter, createdByParameter, updatedByParameter, operationParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeExperience_Result> usp_EmployeeExperience(Nullable<int> experienceID, Nullable<int> employeeID, string companyName, string jobTitle, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdBy, Nullable<int> updatedBy, string operation)
        {
            var experienceIDParameter = experienceID.HasValue ?
                new ObjectParameter("ExperienceID", experienceID) :
                new ObjectParameter("ExperienceID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeExperience_Result>("usp_EmployeeExperience", experienceIDParameter, employeeIDParameter, companyNameParameter, jobTitleParameter, startDateParameter, endDateParameter, createdByParameter, updatedByParameter, operationParameter);
        }
    
        public virtual int usp_EmployeeLoginCredentials(Nullable<int> loginId, Nullable<int> employeeID, string employeeEmail, string employeePassword, Nullable<int> createdBy, Nullable<int> updatedBy, string operation)
        {
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var employeePasswordParameter = employeePassword != null ?
                new ObjectParameter("EmployeePassword", employeePassword) :
                new ObjectParameter("EmployeePassword", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmployeeLoginCredentials", loginIdParameter, employeeIDParameter, employeeEmailParameter, employeePasswordParameter, createdByParameter, updatedByParameter, operationParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeSalaryStructure_Result> usp_EmployeeSalaryStructure(Nullable<int> salaryID, Nullable<int> employeeID, Nullable<decimal> basicSalary, Nullable<decimal> hRA, Nullable<decimal> dA, Nullable<decimal> tA, Nullable<decimal> otherAllowances, Nullable<decimal> deductions, Nullable<decimal> netSalary, Nullable<int> createdBy, Nullable<int> updatedBy, string operation)
        {
            var salaryIDParameter = salaryID.HasValue ?
                new ObjectParameter("SalaryID", salaryID) :
                new ObjectParameter("SalaryID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var basicSalaryParameter = basicSalary.HasValue ?
                new ObjectParameter("BasicSalary", basicSalary) :
                new ObjectParameter("BasicSalary", typeof(decimal));
    
            var hRAParameter = hRA.HasValue ?
                new ObjectParameter("HRA", hRA) :
                new ObjectParameter("HRA", typeof(decimal));
    
            var dAParameter = dA.HasValue ?
                new ObjectParameter("DA", dA) :
                new ObjectParameter("DA", typeof(decimal));
    
            var tAParameter = tA.HasValue ?
                new ObjectParameter("TA", tA) :
                new ObjectParameter("TA", typeof(decimal));
    
            var otherAllowancesParameter = otherAllowances.HasValue ?
                new ObjectParameter("OtherAllowances", otherAllowances) :
                new ObjectParameter("OtherAllowances", typeof(decimal));
    
            var deductionsParameter = deductions.HasValue ?
                new ObjectParameter("Deductions", deductions) :
                new ObjectParameter("Deductions", typeof(decimal));
    
            var netSalaryParameter = netSalary.HasValue ?
                new ObjectParameter("NetSalary", netSalary) :
                new ObjectParameter("NetSalary", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeSalaryStructure_Result>("usp_EmployeeSalaryStructure", salaryIDParameter, employeeIDParameter, basicSalaryParameter, hRAParameter, dAParameter, tAParameter, otherAllowancesParameter, deductionsParameter, netSalaryParameter, createdByParameter, updatedByParameter, operationParameter);
        }
    }
}
